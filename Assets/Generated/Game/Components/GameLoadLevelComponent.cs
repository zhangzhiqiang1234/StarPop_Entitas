//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public LoadLevelComponent loadLevel { get { return (LoadLevelComponent)GetComponent(GameComponentsLookup.LoadLevel); } }
    public bool hasLoadLevel { get { return HasComponent(GameComponentsLookup.LoadLevel); } }

    public void AddLoadLevel(int newLevelId) {
        var index = GameComponentsLookup.LoadLevel;
        var component = (LoadLevelComponent)CreateComponent(index, typeof(LoadLevelComponent));
        component.levelId = newLevelId;
        AddComponent(index, component);
    }

    public void ReplaceLoadLevel(int newLevelId) {
        var index = GameComponentsLookup.LoadLevel;
        var component = (LoadLevelComponent)CreateComponent(index, typeof(LoadLevelComponent));
        component.levelId = newLevelId;
        ReplaceComponent(index, component);
    }

    public void RemoveLoadLevel() {
        RemoveComponent(GameComponentsLookup.LoadLevel);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherLoadLevel;

    public static Entitas.IMatcher<GameEntity> LoadLevel {
        get {
            if (_matcherLoadLevel == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.LoadLevel);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherLoadLevel = matcher;
            }

            return _matcherLoadLevel;
        }
    }
}
